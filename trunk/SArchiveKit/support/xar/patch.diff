Index: filetree.c
===================================================================
--- filetree.c	(revision 222)
+++ filetree.c	(working copy)
@@ -910,6 +910,9 @@
 	return NULL;
 }
 
+xar_file_t xar_file_get_parent(xar_file_t file) {
+  return file->parent;
+}
 
 /* xar_prop_serialize
  * p: property to serialize
Index: filetree.h
===================================================================
--- filetree.h	(revision 222)
+++ filetree.h	(working copy)
@@ -96,6 +96,7 @@
 void xar_file_serialize(xar_file_t f, xmlTextWriterPtr writer);
 xar_file_t xar_file_unserialize(xar_t x, xar_file_t parent, xmlTextReaderPtr reader);
 xar_file_t xar_file_find(xar_file_t f, const char *path);
+xar_file_t xar_file_get_parent(xar_file_t file);
 xar_file_t xar_file_new(xar_file_t f);
 xar_file_t xar_file_replicate(xar_file_t original, xar_file_t newparent);
 void xar_file_free(xar_file_t f);
Index: bzxar.c
===================================================================
--- bzxar.c	(revision 222)
+++ bzxar.c	(working copy)
@@ -51,6 +51,7 @@
 #include "xar.h"
 #include "filetree.h"
 #include "io.h"
+#include "bzxar.h"
 
 #ifdef HAVE_LIBBZ2
 
Index: archive.c
===================================================================
--- archive.c	(revision 222)
+++ archive.c	(working copy)
@@ -91,7 +91,7 @@
  * Summary: just does basicallocation and initialization of 
  * xar_t structure.
  */
-static xar_t xar_new() {
+static xar_t xar_new(void) {
 	xar_t ret;
 	ret = malloc(sizeof(struct __xar_t));
 	if(!ret) return NULL;
@@ -355,7 +355,8 @@
 
 	/* If we're creating an archive */
 	if( XAR(x)->heap_fd != -1 ) {
-		char *tmpser;
+    char *tmpser2;
+		const char *tmpser;
 		void *rbuf, *wbuf = NULL;
 		int fd, r, off, wbytes, rbytes;
 		long rsize, wsize;
@@ -367,7 +368,7 @@
 		struct tm tmptm;
 		time_t t;
 
-		tmpser = (char *)xar_opt_get(x, XAR_OPT_TOCCKSUM);
+		tmpser = xar_opt_get(x, XAR_OPT_TOCCKSUM);
 		/* If no checksum type is specified, default to sha1 */
 		if( !tmpser ) tmpser = XAR_OPT_VAL_SHA1;
 
@@ -403,15 +404,15 @@
 		xar_prop_set(XAR_FILE(x), "creation-time", timestr);
 
 		/* serialize the toc to a tmp file */
-		asprintf(&tmpser, "%s/xar.toc.XXXXXX", XAR(x)->dirname);
-		fd = mkstemp(tmpser);
-		xar_serialize(x, tmpser);
-		unlink(tmpser);
-		free(tmpser);
-		asprintf(&tmpser, "%s/xar.toc.XXXXXX", XAR(x)->dirname);
-		tocfd = mkstemp(tmpser);
-		unlink(tmpser);
-		free(tmpser);
+		asprintf(&tmpser2, "%s/xar.toc.XXXXXX", XAR(x)->dirname);
+		fd = mkstemp(tmpser2);
+		xar_serialize(x, tmpser2);
+		unlink(tmpser2);
+		free(tmpser2);
+		asprintf(&tmpser2, "%s/xar.toc.XXXXXX", XAR(x)->dirname);
+		tocfd = mkstemp(tmpser2);
+		unlink(tmpser2);
+		free(tmpser2);
 		
 	
 		/* read the toc from the tmp file, compress it, and write it
@@ -1026,7 +1027,7 @@
 * using the filesystem.
 */
 
-xar_file_t xar_add_frombuffer(xar_t x, xar_file_t parent, const char *name, char *buffer, size_t length) {
+xar_file_t xar_add_frombuffer(xar_t x, xar_file_t parent, const char *name, const char *buffer, size_t length) {
 	xar_file_t ret;
 	char idstr[32];
 	
Index: archive.h
===================================================================
--- archive.h	(revision 222)
+++ archive.h	(working copy)
@@ -75,7 +75,7 @@
 	                         * between callbacks. */
 	size_t toc_count;       /* current bytes read of the toc */
 	z_stream zs;            /* gz state for compressing/decompressing toc */
-	char *path_prefix;      /* used for distinguishing absolute paths */
+	const char *path_prefix;      /* used for distinguishing absolute paths */
 	err_handler ercallback; /* callback for errors/warnings */
 	struct errctx errctx;   /* error callback context */
 	xar_subdoc_t subdocs;   /* linked list of subdocs */
Index: macho.c
===================================================================
--- macho.c	(revision 222)
+++ macho.c	(working copy)
@@ -189,7 +189,8 @@
 			tmpin += off;
 			if( (inlen-off) >= sizeof(struct mach_header) ) {
 				const char *cpustr;
-				char *typestr, *typestr2;
+				const char *typestr;
+        char *typestr2;
 				struct mach_header *mh = (struct mach_header *)tmpin;
 				switch(mh->magic) {
 				case 0xcffaedfe:
